const path = require('path');
const os = require('os');
const fs = require('fs');

let manifest = {};
let experimentReadPath = path.join(os.homedir(), 'workspace', 'p5Experiments');
let experimentWritePath = path.join(__dirname, '../', 'src', 'experiments')

fs.readdir(experimentReadPath, (err, items) => {
  if (err) { return console.log(err); }
  items = items.filter(item => item !== '.DS_Store')
  fs.writeFile(path.join(experimentWritePath, 'index.js'), generateManifest(items), (err) => {
    if (err) { return console.log(err) }
  });

  items.forEach((item) => {
    fs.readdir(path.join(experimentReadPath, item), (err, subItems) => {
      if (err) { return console.log(err); }
      if (subItems.includes('sketch.js')) {
        fs.readFile(path.join(experimentReadPath, item, 'sketch.js'), 'utf-8', (err, data) => {
          if (err) { return console.log(err); }
          const cleaned = cleanSketch(data, item);
          fs.writeFile(experimentWritePath + '/' + item + '.js', modulify(cleaned), (err) => {
            if (err) { return console.log(err); }
          });
          if (subItems.includes('thumbnail.png')) {
            fs.readFile(path.join(experimentReadPath, item, 'thumbnail.png'), (err, data) => {
              if (err) { return console.log(err) }
              fs.writeFile(path.join(__dirname, '../', 'assets', item + '.png'), data, (err) => {
                if (err) { return console.log(err); }
              });
            });
          }
        });
        const dataPath = path.join(experimentReadPath, item, 'data');
        if (fs.existsSync(dataPath)) {
          if (err) { return console.log(err); }
          fs.readdir(dataPath, (err, items) => {
            if (err) { return console.log(err); }
            items.forEach( (file) => {
              fs.readFile(dataPath + '/' + file, (err, data) => {
                if (err) { return console.log(err); }
                fs.writeFile(experimentWritePath + '/data/' + file, data, (err) => {
                  if (err) { return console.log(err); }
                });
              });
            });
          });
        }
      }
    });
  });
});


function modulify(sketch) {
  return [
    '// this file was autogenerated by bin/daily-sketch-parser',
    'module.exports = () => {',
    sketch,
    '}',
  ].join('\n');
}

function generateManifest(i) {
  let items = i.map((item) => {
    return "'" + item + "': " + "require('./" + item + "'),";
  });

  return [
    '// this file was autogenerated by bin/daily-sketch-parser',
    'module.exports = {',
    items.join('\n'),
    '};'
  ].join('\n');
}

function cleanSketch(data, name) {
  let clean;
  clean = data.replace('./kuler-palette.json', './data/kuler-pallette.json');
  clean = clean.replace('p.setup = function() {',
                        [
                          'p.setup = function() {',
                          "document.addEventListener('stop_sketch', (e) => {",
                          'p.remove()',
                          '});'
                        ].join('\n'))
  clean = clean.replace('const canvas = p.createCanvas(800, 800);',
                        "const canvas = p.createCanvas(800, 800);\n    canvas.parent('canvas-container');");
  return clean;
}
